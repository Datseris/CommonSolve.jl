var documenterSearchIndex = {"docs":
[{"location":"#CommonSolve.jl:-The-Common-Solve-Definition-and-Interface","page":"The Common Solve Interface","title":"CommonSolve.jl: The Common Solve Definition and Interface","text":"","category":"section"},{"location":"","page":"The Common Solve Interface","title":"The Common Solve Interface","text":"This holds the common solve, init, and solve! commands. By using the same definition, solver libraries from other completely different ecosystems can extend the functions and thus not clash with SciML if both ecosystems export the solve command. The rules are that  you must dispatch on one of your own types. That's it. No pirates.","category":"page"},{"location":"#General-recommendation","page":"The Common Solve Interface","title":"General recommendation","text":"","category":"section"},{"location":"","page":"The Common Solve Interface","title":"The Common Solve Interface","text":"solve function has the default definition","category":"page"},{"location":"","page":"The Common Solve Interface","title":"The Common Solve Interface","text":"solve(args...; kwargs...) = solve!(init(args...; kwargs...))","category":"page"},{"location":"","page":"The Common Solve Interface","title":"The Common Solve Interface","text":"So, we recommend defining","category":"page"},{"location":"","page":"The Common Solve Interface","title":"The Common Solve Interface","text":"init(::ProblemType, args...; kwargs...) :: SolverType\nsolve!(::SolverType) :: SolutionType","category":"page"},{"location":"","page":"The Common Solve Interface","title":"The Common Solve Interface","text":"where ProblemType, SolverType, and SolutionType are the types defined in your package.","category":"page"},{"location":"","page":"The Common Solve Interface","title":"The Common Solve Interface","text":"To avoid method ambiguity, the first argument of solve, solve!, and init must be dispatched on the type defined in your package.  For example, do not define a method such as","category":"page"},{"location":"","page":"The Common Solve Interface","title":"The Common Solve Interface","text":"init(::AbstractVector, ::AlgorithmType)","category":"page"},{"location":"#API","page":"The Common Solve Interface","title":"API","text":"","category":"section"},{"location":"","page":"The Common Solve Interface","title":"The Common Solve Interface","text":"init\nsolve\nsolve!","category":"page"},{"location":"#Contributing","page":"The Common Solve Interface","title":"Contributing","text":"","category":"section"},{"location":"","page":"The Common Solve Interface","title":"The Common Solve Interface","text":"Please refer to the SciML ColPrac: Contributor's Guide on Collaborative Practices for Community Packages for guidance on PRs, issues, and other matters relating to contributing to SciML.\nThere are a few community forums:\nThe #diffeq-bridged and #sciml-bridged channels in the Julia Slack\nJuliaDiffEq on Gitter\nOn the Julia Discourse forums (look for the modelingtoolkit tag\nSee also SciML Community page","category":"page"}]
}
